#!/bin/sh

# git >= 2.5 required

# git worktree のラッパー
#
# git-wt
#   現在の worktree の一覧を表示
#
# git-wt BRANCH_NAME
#   オリジナルのディレクトリが属するディレクトリに worktree を作成
#   新ディレクトリ名はオリジナルにブランチ名を足したもの
#   (ブランチ名の "/" は "-" に変換される)
#   git 管理下にないファイルも worktree 内に rsync でコピーされる
#
# git-wt --delete BRANCH_NAME
#   git-wt BRANCH_NAME で作成された worktree を削除
#   フラグは -d も可

delete=false

for ARG; do
  case "$ARG" in
    -d | --delete ) delete=true;;
    *             ) branch=$ARG;;
  esac
done

if [ -z "$branch" ]; then
  git worktree list
  exit $?
fi

root=$(git rev-parse --show-toplevel)
! [ -d "$root" ] && exit 1
wtdir="${root}-$(echo "$branch" | sed -e 's@/@-@g')/"

cd "$root" || exit 1

__git_wt_add() {
  if [ -d "$wtdir" ]; then
    echo "worktree for '$branch' already exists."
    exit 1
  fi

  # ブランチ存在確認
  git fetch --all > /dev/null
  if ! git show-ref --quiet "$branch"; then
    echo "branch '$branch' does not exist."
  fi

  printf "create worktree for '%s'? (y to continue): " "$branch"
  read -r create_yn
  if [ "$create_yn" != 'y' ]; then
    echo canceled.
    exit 1
  fi

  git worktree add "$wtdir" "$branch"

  # git 管理下にないファイルをコピー
  {
    find . -type f | cut -d/ -f2- | \
    grep -v "^.git/" | \
    git check-ignore --stdin | \
    sed 's@^@+ /@' ; printf '+ */\n- *\n';
  } | \time rsync -aR --prune-empty-dirs --filter='. -' . "$wtdir/"

  printf "\ncompleted.\n"
}

__git_wt_del() {
  if ! [ -d "$wtdir" ]; then
    echo "worktree for '${branch}' does not exist."
    exit 1
  fi

  printf "delete worktree for '%s'? (y to continue): " "$branch"
  read -r del_yn
  if [ "$del_yn" != 'y' ]; then
    echo canceled.
    exit 1
  fi

  git worktree remove "$wtdir"
}

if [ "$delete" = "false" ]; then
  __git_wt_add
else
  __git_wt_del
fi

