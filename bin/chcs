#!/bin/bash

# chcs - CHange ColorScheme

config_home="${XDG_CONFIG_HOME:-~/.config}"
is_wsl() { [ -f /proc/sys/fs/binfmt_misc/WSLInterop ]; }

__wsl_env_path() {
  cmd.exe /c echo "%$1%" 2>/dev/null | tr '\\' '/' | tr -d '\r' | sed -e 's@\(\w\):@/mnt/\L\1@'
}

__chcs_wezterm() {
  local dir;
  if is_wsl; then
    home=$(__wsl_env_path USERPROFILE)
    dir="$home/.config/wezterm"
  else
    dir="$config_home/wezterm"
  fi
  mkdir -p "$dir"
  if ! [ -d "$dir" ]; then
    echo "$dir is not a directory."
    return 1
  fi
  cat << EOF >| "$dir/_chcs.lua"
return function(c)
  c.window_background_opacity = $2
  c.color_scheme = '$1'
end
EOF
}

__chcs_tmux() {
  local dir; dir="$config_home/tmux"
  local file; file="$dir/styles/$1.conf"
  if ! [ -d "$dir" ] || ! [ -f "$file" ]; then
    echo An error occurred in chcs tmux.
    return 1
  fi
  command cp -f "$file" "$dir/_chcs.conf"

  if tmux list-clients > /dev/null 2>&1; then
    tmux source "$dir/tmux.conf"
  fi
}

__chcs_nvim() {
  local dir; dir="$config_home/nvim/lua/plug"
  if ! [ -d "$dir" ]; then
    echo "$dir not found."
    return 1
  fi
  cat << EOF >| "$dir/_chcs.lua"
return {
  '$1',
  lazy = false,
  priority = 1000,
  config = function()
    vim.cmd.colorscheme '$2'
    vim.o.background = '$3'
  end,
}
EOF
  # List all Nvim servers. see :h serverstart()
  local r; r="${XDG_RUNTIME_DIR:-${TMPDIR}nvim.${USER}}"
  for s in "$r"/nvim.*.0 "$r"/*/nvim.*.0; do
    if [ -e "$s" ]; then
      timeout 1 nvim --server "$s" --remote-send "<CMD>set bg=$3<CR>" > /dev/null 2>&1
      timeout 1 nvim --server "$s" --remote-send "<CMD>colorscheme $2<CR>" > /dev/null 2>&1
    fi
  done
}

__chcs_delta() {
  local dir; dir="$config_home/git"
  if ! [ -d "$dir" ]; then
    echo An error occurred in chcs delta.
    return 1
  fi
  [ "$mode" = 'light' ] && val='true' || val='false'
  echo "[delta]"        >| "$dir/_chcs.gitconfig"
  echo "  light = $val" >> "$dir/_chcs.gitconfig"
}

__chcs_os() {
  # mac
  if echo "$OSTYPE" | grep darwin -q; then
    case "$1" in
      dark ) osascript -e 'tell app "System Events" to tell appearance preferences to set dark mode to true';;
      light ) osascript -e 'tell app "System Events" to tell appearance preferences to set dark mode to false';;
    esac
  fi
  # wsl
  if uname -r | grep microsoft -q; then
    ps="/mnt/c/WINDOWS/System32/WindowsPowerShell/v1.0/powershell.exe"
    if [ ! -f "$ps" ]; then
      echo "$ps does not exist."
      return 1
    fi
    case "$1" in
      dark )
        # shellcheck disable=SC1001
        $ps -c 'Set-ItemProperty -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize -Name AppsUseLightTheme -Value 0'
        $ps -c 'Set-ItemProperty -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize -Name SystemUsesLightTheme -Value 0'
        ;;
      light )
        # shellcheck disable=SC1001
        $ps -c 'Set-ItemProperty -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize -Name AppsUseLightTheme -Value 1'
        $ps -c 'Set-ItemProperty -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize -Name SystemUsesLightTheme -Value 1'
        ;;
    esac
    # refresh taskbar
    $ps -c 'Get-process explorer | Stop-process'
  fi
}

# default values
name=iceberg
mode=dark # light or dark

SAVE_FILE="$config_home/_colorscheme"
if [ -f "$SAVE_FILE" ]; then
  name=$(head -n 1 "$SAVE_FILE")
  mode=$(tail -n 1 "$SAVE_FILE")
fi

for ARG; do
  case $ARG in
    --dark | -d ) mode=dark;;
    --light | -l ) mode=light;;
    --toggle )
      if [ "$mode" == "dark" ]; then
        mode=light
      elif [ "$mode" == "light" ]; then
        mode=dark
      fi
      ;;
    --no-os ) no_os=true;;
    * ) name="$ARG";;
  esac
done

echo name: "${name}, mode: ${mode}"

[ -z "$no_os" ] && __chcs_os "$mode"
__chcs_tmux "$mode"
__chcs_delta "$mode"

case "${name}_${mode}" in
  iceberg_light )
    __chcs_wezterm iceberg-light 0.85
    __chcs_nvim cocopon/iceberg.vim iceberg light
    ;;
  iceberg_dark )
    __chcs_wezterm iceberg-dark 0.85
    __chcs_nvim cocopon/iceberg.vim iceberg dark
    ;;
  rose-pine_light ) # does not exist
    __chcs_wezterm 'Rosé Pine Dawn (base16)' 0.93
    __chcs_nvim rose-pine/neovim rose-pine light
    ;;
  rose-pine_dark )
    __chcs_wezterm 'Rosé Pine (base16)' 0.9
    __chcs_nvim rose-pine/neovim rose-pine dark
    ;;
  * )
    echo colorscheme not found.
    exit 1
    ;;
esac

# save current colorscheme name
echo "$name" >| "$SAVE_FILE"
echo "$mode" >> "$SAVE_FILE"
