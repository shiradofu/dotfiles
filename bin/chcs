#!/bin/bash

# chcs - CHange ColorScheme

__chcs_wezterm() {
  local dir; dir="$XDG_CONFIG_HOME/wezterm"
  local file; file="$dir/_wezterm.lua"
  if ! [ -d "$dir" ] || ! [ -f "$file" ]; then
    echo An error occurred in chcs tmux.
    return 1
  fi
  sed -e s/WEZTERM_COLOR/"$1"/ -e s/WEZTERM_OPACITY/"$2"/ \
    "$file" >| "$dir/wezterm.lua"
}

__chcs_tmux() {
  local dir; dir="$XDG_CONFIG_HOME/tmux"
  local file; file="$dir/styles/$1.conf"
  if ! [ -d "$dir" ] || ! [ -f "$file" ]; then
    echo An error occurred in chcs tmux.
    return 1
  fi
  command cp -f "$file" "$dir/_style.conf"
  if [ -n "$TMUX" ]; then tmux source "$dir/tmux.conf"; fi
}

__chcs_nvim() {
  local dir; dir="$XDG_CONFIG_HOME/nvim"
  if ! [ -d "$dir" ]; then
    echo An error occurred in chcs nvim.
    return 1
  fi
  echo "let g:colorscheme = '$1'" >| "$dir/_color.vim"
  echo "set background=$2" >> "$dir/_color.vim"
  for s in "$XDG_CACHE_HOME"/nvim/*.pipe; do
    nvim --server "$s" --remote-send "<CMD>set bg=$2<CR>" > /dev/null 2>&1
    nvim --server "$s" --remote-send "<CMD>colorscheme $1<CR>" > /dev/null 2>&1
  done
}

__chcs_mode() {
  # osx
  if uname | grep Darwin -q; then
    case "$1" in
      dark ) osascript -e 'tell app "System Events" to tell appearance preferences to set dark mode to true';;
      light ) osascript -e 'tell app "System Events" to tell appearance preferences to set dark mode to false';;
    esac
  fi
  if uname -r | grep microsoft -q; then
    # TODO: fix
    case "$1" in
      # dark ) powershell.exe -c 'Set-ItemProperty -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize -Name AppsUseLightTheme -Value 0';;
      # light ) powershell.exe -c 'Set-ItemProperty -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize -Name AppsUseLightTheme -Value 1';;
    esac
  fi
}

SAVE_FILE="$XDG_CONFIG_HOME/colorscheme"
name=
mode=dark # light or dark
if [ -f "$SAVE_FILE" ]; then
  name=$(head -n 1 "$SAVE_FILE")
  mode=$(tail -n 1 "$SAVE_FILE")
fi

for ARG; do
  case $ARG in
    --dark | -d ) mode=dark;;
    --light | -l ) mode=light;;
    --toggle )
      if [ "$mode" == "dark" ]; then
        mode=light
      elif [ "$mode" == "light" ]; then
        mode=dark
      fi
      ;;
    * )
      name="$ARG"
  esac
done

if [ -z "$name" ]; then
  echo colorscheme name required.
  exit 1
fi

echo name: "${name}, mode: ${mode}"

case "${name}_${mode}" in
  zenwritten_light )
    __chcs_tmux light
    __chcs_nvim zenwritten light
    __chcs_wezterm zenwritten_light 0.9
    ;;
  zenwritten_dark )
    __chcs_tmux dark
    __chcs_nvim zenwritten dark
    __chcs_wezterm zenwritten_dark 0.9
    ;;
  poimandres_light ) # does not exist
    __chcs_tmux light
    __chcs_nvim zenwritten light
    __chcs_wezterm zenwritten_light 0.9
    ;;
  poimandres_dark )
    __chcs_tmux dark
    __chcs_nvim poimandres dark
    __chcs_wezterm zenwritten_dark 0.9
    ;;
  * )
    echo colorscheme not found.
    exit 1
    ;;
esac

__chcs_mode "$mode"

# save current colorscheme name
echo "$name" >| "$SAVE_FILE"
echo "$mode" >> "$SAVE_FILE"
